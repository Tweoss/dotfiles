# Nushell Config File

# Path Configuration
source ~/.config/nushell/config/path.nu

# starship prompt
source ~/.config/nushell/config/prompt.nu

# aliases (e.g. open)
source ~/.config/nushell/config/alias.nu

# env variables
source ~/.config/nushell/config/env.nu

# script files
source ~/.config/nushell/scripts.nu

# Get just the extern definitions without the custom completion commands
source ~/.config/nushell/config/default_completions.nu
use default_completions *

# Generated by running cmd | parse-help | make-completion "cmd"
source ~/.config/nushell/config/generated_completions.nu

# theming
source ~/.config/nushell/config/theme.nu

# custom keybinds
source ~/.config/nushell/config/custom_keybinds.nu

# menus
source ~/.config/nushell/config/menus.nu

# hooks
source ~/.config/nushell/config/hooks.nu

# combine default and custom keybinds
let __keybinds = ([
    {
      name: completion_menu
      modifier: none
      keycode: tab
      mode: emacs # Options: emacs vi_normal vi_insert
      event: {
        until: [
          { send: menu name: completion_menu }
          { send: menunext }
        ]
      }
    }
    {
      name: completion_previous
      modifier: shift
      keycode: backtab
      mode: [emacs, vi_normal, vi_insert] # Note: You can add the same keybinding to all modes by using a list
      event: { send: menuprevious }
    }
    {
      name: history_menu
      modifier: control
      keycode: char_r
      mode: emacs
      event: { send: menu name: history_menu }
    }
    {
      name: next_page
      modifier: control
      keycode: char_x
      mode: emacs
      event: { send: menupagenext }
    }
    {
      name: undo_or_previous_page
      modifier: control
      keycode: char_z
      mode: emacs
      event: {
        until: [
          { send: menupageprevious }
          { edit: undo }
        ]
       }
    }
    # Keybindings used to trigger the user defined menus
    {
      name: commands_menu
      modifier: control
      keycode: char_t
      mode: [emacs, vi_normal, vi_insert]
      event: { send: menu name: commands_menu }
    }
    {
      name: vars_menu
      modifier: control
      keycode: char_y
      mode: [emacs, vi_normal, vi_insert]
      event: { send: menu name: vars_menu }
    }
  ] | append $__custom_keybinds);

# The default config record. This is where much of your global configuration is setup.
let-env config = {
  filesize_metric: false
  table_mode: heavy # basic, compact, compact_double, light, thin, with_love, rounded, reinforced, heavy, none, other
  use_ls_colors: true
  rm_always_trash: true
  color_config: $default_theme
  use_grid_icons: true
  footer_mode: "25" # always, never, number_of_rows, auto
  quick_completions: true  # set this to false to prevent auto-selecting completions when only one remains
  partial_completions: true  # set this to false to prevent partial filling of the prompt
  completion_algorithm: "prefix"  # prefix, fuzzy
  animate_prompt: false # redraw the prompt every second
  float_precision: 2
  use_ansi_coloring: true
  filesize_format: "auto" # b, kb, kib, mb, mib, gb, gib, tb, tib, pb, pib, eb, eib, zb, zib, auto
  edit_mode: emacs # emacs, vi
  max_history_size: 10000
  sync_history_on_enter: true # Enable to share the history between multiple sessions, else you have to close the session to persist history to file
  shell_integration: true # enables terminal markers and a workaround to arrow keys stop working issue
  disable_table_indexes: false # set to true to remove the index column from tables
  cd_with_abbreviations: false # set to true to allow you to do things like cd s/o/f and nushell expand it to cd some/other/folder
  hooks: $hooks
  menus: $menus
  keybindings:  $__keybinds
}

